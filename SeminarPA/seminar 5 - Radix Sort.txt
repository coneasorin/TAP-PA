#include <iostream>
#include <vector>
#include <algorithm>
 
// Funcție pentru a găsi cea mai mare valoare din vector
int getMax(const std::vector<int>& arr) {
    int max = arr[0];
    for (int i = 1; i < arr.size(); i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}
 
// Funcție de Counting Sort pentru a sorta elementele pe baza cifrei semnificative
void countingSort(std::vector<int>& arr, int exp) {
    int n = arr.size();
    std::vector<int> output(n); // Vectorul rezultat, care va conține valorile sortate temporar
    int count[10] = {0}; // Vector de frecvență pentru fiecare cifră (0-9)
 
    // Calculăm frecvența fiecărei cifre în poziția specificată de `exp`
    for (int i = 0; i < n; i++) {
        int index = (arr[i] / exp) % 10;
        count[index]++;
    }
 
    // Modificăm vectorul count astfel încât să conțină pozițiile corecte în vectorul output
    for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
    }
 
    // Construim vectorul output
    for (int i = n - 1; i >= 0; i--) {
        int index = (arr[i] / exp) % 10;
        output[count[index] - 1] = arr[i];
        count[index]--;
    }
 
    // Copiem valorile sortate din vectorul output înapoi în vectorul original `arr`
    for (int i = 0; i < n; i++) {
        arr[i] = output[i];
    }
}
 
// Funcția principală Radix Sort
void radixSort(std::vector<int>& arr) {
    // Găsim cea mai mare valoare pentru a ști numărul maxim de cifre
    int max = getMax(arr);
 
    // Aplicăm Counting Sort pentru fiecare cifră (unități, zeci, sute etc.)
    for (int exp = 1; max / exp > 0; exp *= 10) {
        countingSort(arr, exp);
    }
}
 
int main() {
    std::vector<int> arr = {170, 45, 75, 90, 802, 24, 2, 66};
    radixSort(arr);
 
    std::cout << "Vectorul sortat este: ";
    for (int num : arr) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
 
    return 0;